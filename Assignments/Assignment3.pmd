% Finance 5350 - Assignment 3
% Tyler J. Brough
% October 7, 2017


## European Binomial Option Pricing Model

**Problem 1**

<br>
<br>

In this problem you will use the classes that we have developed to price European puts and calls with the
multi-period Binomial Option Pricing Model (BOPM). This problem is more or less done for you in our lectures.

<br>

Demonstrate that this code works by replicating the pricing of the European put option in Figure 10.6 of the
McDonald book on page 328 (see attached). You should get a price of $2.999 for the put option. 

<br>

Also, price the corresponding call option to demonstrate the algorithm, implemented once, is polymorphic and is
capable of pricing call options as well. 

```{python, evaluate = False}
class VanillaOption(object):
	"""An abstract interface for plain vanilla options."""

	def __init__(self, strike, expiry):
		self.strike = strike
		self.expiry = expiry

	def payoff(self, spot):
		pass

class VanillaCallOption(VanillaOption):
	"""A concrete class for vanilla call options."""

	def payoff(self, spot):
		return np.maximum(spot - self.strike, 0.0)

class VanillaPutOption(VanillaOption):
	"""A concrete class for vanilla put options."""

	def payoff(self, spot):
		return np.maximum(self.strike - spot, 0.0)
```

<br>
With these classes you can now write your pricing function using the code below as an outline.

<br>

```{python, evaluate = False}
def EuropeanBinomialPricer(option, spot, rate, vol, div, steps):
	## insert code here

	return price
```

<br>


## American Binomial Option Pricing Model

<br>
<br>

**Problem 2**

In this problem, building off of the code above, you will implement the American Binomial Option Pricing Model
(ABOPM). Reprice both of the options above as American options. Outline the differences between the European
and the American solutions.

<br>
Use the following as a starting outline:

```{python, evaluate = False}
def AmericanBinomialPricer(option, spot, rate, vol, div, steps):
	## insert your code here

	return price
```

<br>


## Naive Monte Carlo Option Pricing Model

**Problem 3**

In this problem, again utilizing the code written above, you will implement the Naive Monte Carlo Option Pricing
Model for European puts and calls. Reprice both options above.

Recall, that if we can simulate prices under the risk-neutral density, then we can statistically estimate the
option price as follows:

$$
\hat{C_{0}} = \frac{1}{M} \sum\limits_{j=1}^{M} C_{T,j}
$$

where $C_{T,j}$ is the option payoff at $t=T$ for the $j^{th}$ simulated spot price. The applied to both puts
and calls, so again you can use polymorphism.

Recall, that the first model that we will use to simulate prices in discrete time was called discrete-time
Brownian motion, and can be implemented as follows:

$$
S_{t+h} = S_{t} \exp{ \left((r - \delta - \frac{1}{2} \sigma^{2}) + \sigma \sqrt{h} Z \right) }
$$

where $Z$ is a draw from a Standard Normal distribution (i.e. $Z \sim N(0,1)$). And in the simple Black-Scholes
word we set $t + h = T$.

This gives us the estimated mean option price. We can also calculate the estimated standard error as follows:

$$
SE(\hat{C_{0}}) = \frac{SD(C_{0,j})}{\sqrt{M}}
$$

where $SD(C_{0,j})$ is the sample standard deviation, and is given as follows:

$$
SD(C_{0,j}) = \sqrt{\frac{1}{M-1} \sum\limits_{j=1}^{M} (C_{0,j} - \hat{C_{0}})^{2}}
$$

Report both $\hat{C_{0}}$ and $SE(\hat{C_{0}})$.

```{python, evaluate = False}
def NaiveMonteCarloPricer(option, spot, rate, vol, div, nreps):
	## insert your code here

	return price
```


## Deck of Cards


**Problem 4**

<br>

In this problem you will write object-oriented code to simulate the ***Deck of Cards Workout*** from Ross
Enamait's book *Never Gymless*.

The details are given as follows from Enamait's book:

This workout requires a standard deck of 52 playing cards. Each red card (diamonds and hearts) will require a set
of burpees. Each black card (spades and clubs) will require a set of pushups.

To perform the workout, start with a fully shuffled deck of cards. All face cards (Jacks, Queen, and King) have a
value of 10. Aces have a value of 11. Number cards will be face value (ex. 7 of spades = 7 pushups). Do not use
Joker cards for this problem.

Each card requires a set of pushups or burpees, depending on the color of the card. Strive to work through the
entire deck as fast as possible. If burpees become too difficult, switch to squat thrusts. 

**Deck of Cards**

- Burpees for every red card
- Pushups for every black card

You will need to create classes with the appropriate data members and methods to simulate this process. You will
need classes for the deck of cards, for the different suites of cards (diamonds, hearts, spades, clubs). You
will need methods for drawing from the deck without replacement (*hint:* represent the deck as a list of
cards, and use a pseudo-random number to sample randomly and the *pop* method to pull it from the list). You will
also want a method that can randomly shuffle the deck, etc. Think carefully about this and plan it out before
you begin to write any code.


